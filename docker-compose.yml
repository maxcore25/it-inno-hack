version: '3.9'

services:
  db:
    container_name: db
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - db-volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: it_inno_hack_db
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mail.r
      PGADMIN_DEFAULT_PASSWORD: 123
    ports:
      - '5050:80'
    volumes:
      - pgadmin-volume:/var/lib/pgadmin
    depends_on:
      - db

  # backend:
  #   container_name: backend
  #   build:
  #     context: ./backend
  #   restart: unless-stopped
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./backend:/app
  #   ports:
  #     # - '${BACKEND_PORT}:${BACKEND_PORT}'
  #     - '8080:8080'

    # environment:
    #   DEBUG: ${DEBUG}

    #   BACKEND_HOST: ${BACKEND_HOST}
    #   BACKEND_PORT: ${BACKEND_PORT}
    #   BACKEND_RELOAD: ${BACKEND_RELOAD}

    #   BACKEND_JWT_SECRET: ${BACKEND_JWT_SECRET}
    #   BACKEND_JWT_ALGORITHM: ${BACKEND_JWT_ALGORITHM}
    #   BACKEND_JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${BACKEND_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}

    #   POSTGRES_SERVER: ${POSTGRES_SERVER}
    #   POSTGRES_USER: ${POSTGRES_USER}
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   POSTGRES_DB: ${POSTGRES_DB}

    #   ENV: development
    networks:
      - default

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    ports:
      - '80:3000'

volumes:
  db-volume:
  pgadmin-volume:
